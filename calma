import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Random;
import java.util.Scanner;

class Tesouro {
    private String nome;
    private int valorPontos;

    public Tesouro(String nome, int valorPontos) {
        this.nome = nome;
        this.valorPontos = valorPontos;
    }

    public String getNome() {
        return nome;
    }

    public int getValorPontos() {
        return valorPontos;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }


    public void setValorPontos(int valorPontos) {
        this.valorPontos = valorPontos;
    }

    public String efeito() {
        return "Fragmento de memória recuperado!";
    }
}

class MemoriaInfancia extends Tesouro {
    public MemoriaInfancia(String nome, int valorPontos) {
        super(nome, valorPontos);
    }

    @Override
    public String efeito() {
        return "Uma lembrança feliz da infância fortaleceu sua determinação! +10% de resistência emocional.";
    }
}

class MemoriaMae extends Tesouro {
    public MemoriaMae(String nome, int localizacao, int valorPontos) {
        super(nome, localizacao, valorPontos);
    }

    @Override
    public String efeito() {
        return "O abraço da mãe reaquece o coração. Você se cura totalmente!";
    }
}

class MemoriaDescobertaCientifica extends Tesouro {
    public MemoriaDescobertaCientifica(String nome, int valorPontos) {
        super(nome, valorPontos);
    }

    @Override
    public String efeito() {
        return "Você se lembra da sua grande conquista científica! Ganha visão extra por 3 movimentos.";
    }
}

class MemoriaChave extends Tesouro {
    private int posicaoDesbloqueio;

    public MemoriaChave(String nome, int valorPontos, int posicaoDesbloqueio) {
        super(nome, valorPontos);
        this.posicaoDesbloqueio = posicaoDesbloqueio;
    }

    public int getPosicaoDesbloqueio() {
        return posicaoDesbloqueio;
    }

    @Override
    public String efeito() {
        return "Você encontrou a Chave da Mente! Sala secreta na posição "
                + posicaoDesbloqueio + " desbloqueada!";
    }
}

class Cientista {
    private String nome;
    private int localizacao;
    private List<Tesouro> tesourosEncontrados;

    public Cientista(String nome, int localizacao) {
        this.nome = nome;
        this.localizacao = localizacao;
        this.tesourosEncontrados = new ArrayList<>();
    }

    public String getNome() {
        return nome;
    }

    public int getLocalizacao() {
        return localizacao;
    }

    public List<Tesouro> getTesourosEncontrados() {
        return tesourosEncontrados;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public void setLocalizacao(int localizacao) {
        this.localizacao = localizacao;
    }

    public void adicionarTesouro(Tesouro tesouro) {
        tesourosEncontrados.add(tesouro);
    }
}

class Perigo {
    private int localizacao;
    private double dano;

    public Perigo(int localizacao, double dano) {
        this.localizacao = localizacao;
        this.dano = dano;
    }

    public int getLocalizacao() {
        return localizacao;
    }

    public double getDano() {
        return dano;
    }

    public void setLocalizacao(int localizacao) {
        this.localizacao = localizacao;
    }

    public void setDano(double dano) {
        this.dano = dano;
    }

    public String efeito() {
        return "Você foi atingido por um perigo!";
    }
}

class Pesadelo extends Perigo {
    public Pesadelo(int localizacao, double dano) {
        super(localizacao, dano);
    }

    @Override
    public String efeito() {
        return "Você foi paralisado por um terrível pesadelo! Perde um turno.";
    }
}

class Ansiedade extends Perigo {
    public Ansiedade(int localizacao, double dano) {
        super(localizacao, dano);
    }

    @Override
    public String efeito() {
        return "Uma crise de ansiedade te confunde. Você anda aleatoriamente!";
    }
}

class Duvida extends Perigo {
    public Duvida(int localizacao, double dano) {
        super(localizacao, dano);
    }

    @Override
    public String efeito() {
        return "A dúvida te faz hesitar. Seu próximo movimento é bloqueado.";
    }
}

class Labirinto {
    private List<Tesouro> tesourosDisponiveis;
    private List<Perigo> perigos;
    private Set<Integer> salasTrancadas;
    private List<List<String>> estrutura;
    private int tamanho;

    public Labirinto(int tamanho) {
        this.tamanho = tamanho;
        this.tesourosDisponiveis = new ArrayList<>();
        this.perigos = new ArrayList<>();
        this.salasTrancadas = new HashSet<>();
        this.estrutura = new ArrayList<>();
        inicializarLabirinto();
        gerarLabirinto();
    }

    public void visualizarLabirinto(Cientista cientista) {
        int posCientista = cientista.getLocalizacao();
        for (int i = 0; i < tamanho; i++) {
            for (int j = 0; j < tamanho; j++) {
                int posAtual = i * tamanho + j;

                if (posAtual == posCientista) {
                    System.out.print("☹ ");
                } else if (!salaLiberada(posAtual)) {
                    System.out.print("☑ ");
                } else if (encontrarTesouroNaPosicao(posAtual) != null) {
                    System.out.print("❤ ");
                } else if (encontrarPerigoNaPosicao(posAtual) != null) {
                    System.out.print("☠ ");
                } else {
                    System.out.print("= ");
                }
            }
            System.out.println();
        }
    }

    private void inicializarLabirinto() {
        tesourosDisponiveis.add(new MemoriaInfancia("Brinquedo Favorito", 3, 50));
        tesourosDisponiveis.add(new MemoriaMae("Abraço da Mãe", 7, 80));
        tesourosDisponiveis.add(new MemoriaChave("Chave Secreta", 5, 0, 12));
        perigos.add(new Pesadelo(4, 20));
        perigos.add(new Ansiedade(9, 15));
        salasTrancadas.add(12);
    }

    public Tesouro encontrarTesouroNaPosicao(int posicao) {
        for (Tesouro t : tesourosDisponiveis)
            if (t.getLocalizacao() == posicao)
                return t;
        return null;
    }

    public Perigo encontrarPerigoNaPosicao(int posicao) {
        for (Perigo p : perigos)
            if (p.getLocalizacao() == posicao)
                return p;
        return null;
    }

    public void removerTesouro(Tesouro t) {
        tesourosDisponiveis.remove(t);
    }

    public void adicionarTesouro(Tesouro t) {
        tesourosDisponiveis.add(t);
    }

    public boolean salaLiberada(int posicao) {
        return !salasTrancadas.contains(posicao);
    }

    public void desbloquearSala(int posicao) {
        salasTrancadas.remove(posicao);
    }

    public void adicionarPerigo(Perigo p) {
        perigos.add(p);
    }

    public void removerPerigo(Perigo p) {
        perigos.remove(p);
    }

    public void gerarLabirinto() {
        Random random = new Random();
        int totalSalas = tamanho * tamanho;

        int qtdTesouros = tamanho; // exemplo: 1 tesouro por linha
        int qtdPerigos = tamanho;  // 1 perigo por linha

        Set<Integer> posicoesUsadas = new HashSet<>();

        // Gerar tesouros
        while (tesourosDisponiveis.size() < qtdTesouros) {
            int pos = random.nextInt(totalSalas);
            if (!posicoesUsadas.contains(pos)) {
                tesourosDisponiveis.add(new Tesouro("Tesouro", pos));
                posicoesUsadas.add(pos);
            }
        }

        // Gerar perigos
        while (perigos.size() < qtdPerigos) {
            int pos = random.nextInt(totalSalas);
            if (!posicoesUsadas.contains(pos)) {
                perigos.add(new Perigo("Perigo", pos));
                posicoesUsadas.add(pos);
            }
        }
    }
}

//Q ~ CRIANDO O MAIN, com menu
public class ProjetoPOO {

    // Q ~ pensei em o texto ir aparecendo devagar, e não imediatamente no terminal:
    public static void digitando(String texto, int tempo_atraso) {
        for (char c : texto.toCharArray()) {
            System.out.print(c);
            try {
                Thread.sleep(tempo_atraso);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int op = 0;

        while (true) {
            System.out.println("Bem-vinda(o)! Selecione uma opção: ");
            System.out.println("1 - Começar");
            System.out.println("2 - Sair");
            System.out.print("Escolha uma opção: ");
            op = sc.nextInt();
            sc.nextLine();

            switch (op) {
                case 1:
                    digitando("Iniciando o jogo...", 20);


                    System.out.print("Digite o nome da cientista: ");
                    String nome = sc.nextLine();

                    digitando("Escolha uma característica especial da cientista:", 20);
                    System.out.println("1 - Raciocínio lógico mais eficiente");
                    System.out.println("2 - Mais bondade");
                    System.out.println("3 - Coragem");
                    System.out.print("Escolha (1-3): ");
                    int caracteristica = sc.nextInt();
                    sc.nextLine();

                    String escolha = "";
                    switch (caracteristica) {
                        case 1:
                            escolha = "Raciocínio lógico mais eficiente";
                            digitando("Muito bem, " + nome + ". Sua característica especial é: " + escolha + ".", 50);
                            digitando("Você acordou! \n 'Puxa... que lugar estranho...'  \n 'A única coisa que me lembro é meu nome...'" + nome + "...", 20);
                            Cientista cientista = new Cientista(nome, 0);
                            Labirinto labirinto = new Labirinto(10);
                            labirinto.visualizarLabirinto(cientista);
                            break;
                        case 2:
                            escolha = "Mais bondade";
                            digitando("Muito bem, " + nome + ". Sua característica especial é: " + escolha + ".", 50);
                            digitando("Você acordou! \n 'Puxa... que lugar estranho...' \n 'A única coisa que me lembro é meu nome...'" + nome + "...", 20);
                            break;
                        case 3:
                            escolha = "Coragem";
                            digitando("Muito bem, " + nome + ". Sua característica especial é: " + escolha + ".", 50);
                            digitando("Você acordou! \n 'Puxa... que lugar legal!' \n 'A única coisa que me lembro é meu nome...'" + nome + "...", 20);
                            break;
                        default:
                            escolha = "Indefinida";
                            digitando("Escolha inválida. Característica padrão aplicada.", 50);
                    }
                    break;

                case 2:
                    digitando("Saindo do jogo. Até a próxima!", 50);
                    return;

                default:
                    digitando("Opção inválida. Tente novamente.", 50);
            }
        }
    }
}
